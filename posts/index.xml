<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Notes</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Sep 2021 00:20:23 +0800</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Third Post</title>
      <link>http://example.org/posts/my-third-post/</link>
      <pubDate>Sat, 18 Sep 2021 00:20:23 +0800</pubDate>
      
      <guid>http://example.org/posts/my-third-post/</guid>
      <description>Reset gh-pages;</description>
    </item>
    
    <item>
      <title>无穷大常量</title>
      <link>http://example.org/posts/01-%E6%97%A0%E7%A9%B7%E5%A4%A7%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Sat, 18 Sep 2021 00:20:23 +0800</pubDate>
      
      <guid>http://example.org/posts/01-%E6%97%A0%E7%A9%B7%E5%A4%A7%E5%B8%B8%E9%87%8F/</guid>
      <description>int型变量的取值范围：[-2^31, 2^31 - 1] -&amp;gt; [-2147483648, 2147483647] 0x7fffffff = 2147483647 = (2^31 - 1) = (1 &amp;lt;&amp;lt; 31) - 1 0x3fffffff = 1073741823 = (2^30 - 1) = (1 &amp;lt;&amp;lt; 30) - 1 0x3f3f3f3f = 1061109567 在写编程题目时常常需要用到无穷大，比如在求图的最短路径时，就需要先将源点到各点的最短距离设置为无穷大 在十进制表示下，0x7fffffff = 2147483647，恰好等于int型变量的上界，所以在一些情况下用0x7fffffff表示无穷大是一个很好的选择
 这些情况包括但不限于数的比较，min(num, 0x7fffffff)，一开始设置num是0x7fffffff，用这个式子判断是否num已改变  但是对于很多情况，设置无穷大为0x7fffffff并不能满足我们的需求，因为对于无穷大，加上一个数应该还是无穷大。而在计算机中，0x7fffffff加上一个数后会溢出，就不再是无穷大，还可能是负数。
这时候我们需要换个数来表示无穷大，这次我们选择0x3fffffff，这个数用十进制表示是(1 &amp;laquo; 30) - 1，因为一般场合下程序中的数据都是小于1e9的，而0x3fffffff = 1073741823 &amp;gt; 1e9。那么这个数不仅满足了比程序中的任何数都大，而且0x3fffffff + 0x3fffffff = (1 &amp;laquo; 31) - 2小于int型的边界(1 &amp;laquo; 31) - 1 = 2147483647，同时满足了无穷大加上一个数还是无穷大
除了用0x3fffffff表示无穷大之外，我们还经常能看到用0x3f3f3f3f表示无穷大。其实和0x3fffffff一样，因为一般场合下的数据都是小于1e9的，而0x3f3f3f3f = 1061109567 &amp;gt; 1e9。同样0x3f3f3f3f + 0x3f3f3f3f = 2122219134 &amp;lt; int型的边界(1 &amp;laquo; 31) - 1 = 2147483647，也满足无穷大加上一个无穷大还是无穷大。不仅如此，如果要对一个数组全部赋值无穷大时，如果觉得使用循环麻烦，可以使用memset结合0x3f3f3f3f将数组全部赋值为无穷大，我们知道memset是按字节赋值的，它能够对数组清零(因为0的每个字节都是0)，或者全部赋值-1(因为-1在计算机中的表示形式为111&amp;hellip;,每个字节都是11111111)，由于0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部设置为无穷大时，我们只需要memset(arr, 0x3f, sizeof(arr))</description>
    </item>
    
    <item>
      <title>My Second Post</title>
      <link>http://example.org/posts/my-second-post/</link>
      <pubDate>Fri, 17 Sep 2021 23:59:22 +0800</pubDate>
      
      <guid>http://example.org/posts/my-second-post/</guid>
      <description>Hello twice!</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Fri, 17 Sep 2021 23:28:58 +0800</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>Hello hugo!</description>
    </item>
    
  </channel>
</rss>
